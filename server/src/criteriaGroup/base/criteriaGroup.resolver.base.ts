/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCriteriaGroupArgs } from "./CreateCriteriaGroupArgs";
import { UpdateCriteriaGroupArgs } from "./UpdateCriteriaGroupArgs";
import { DeleteCriteriaGroupArgs } from "./DeleteCriteriaGroupArgs";
import { CriteriaGroupFindManyArgs } from "./CriteriaGroupFindManyArgs";
import { CriteriaGroupFindUniqueArgs } from "./CriteriaGroupFindUniqueArgs";
import { CriteriaGroup } from "./CriteriaGroup";
import { MarksBandFindManyArgs } from "../../marksBand/base/MarksBandFindManyArgs";
import { MarksBand } from "../../marksBand/base/MarksBand";
import { Rubric } from "../../rubric/base/Rubric";
import { CriteriaGroupService } from "../criteriaGroup.service";

@graphql.Resolver(() => CriteriaGroup)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class CriteriaGroupResolverBase {
  constructor(
    protected readonly service: CriteriaGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CriteriaGroup",
    action: "read",
    possession: "any",
  })
  async _criteriaGroupsMeta(
    @graphql.Args() args: CriteriaGroupFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CriteriaGroup])
  @nestAccessControl.UseRoles({
    resource: "CriteriaGroup",
    action: "read",
    possession: "any",
  })
  async criteriaGroups(
    @graphql.Args() args: CriteriaGroupFindManyArgs
  ): Promise<CriteriaGroup[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CriteriaGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CriteriaGroup",
    action: "read",
    possession: "own",
  })
  async criteriaGroup(
    @graphql.Args() args: CriteriaGroupFindUniqueArgs
  ): Promise<CriteriaGroup | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CriteriaGroup)
  @nestAccessControl.UseRoles({
    resource: "CriteriaGroup",
    action: "create",
    possession: "any",
  })
  async createCriteriaGroup(
    @graphql.Args() args: CreateCriteriaGroupArgs
  ): Promise<CriteriaGroup> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        rubric: {
          connect: args.data.rubric,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CriteriaGroup)
  @nestAccessControl.UseRoles({
    resource: "CriteriaGroup",
    action: "update",
    possession: "any",
  })
  async updateCriteriaGroup(
    @graphql.Args() args: UpdateCriteriaGroupArgs
  ): Promise<CriteriaGroup | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          rubric: {
            connect: args.data.rubric,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CriteriaGroup)
  @nestAccessControl.UseRoles({
    resource: "CriteriaGroup",
    action: "delete",
    possession: "any",
  })
  async deleteCriteriaGroup(
    @graphql.Args() args: DeleteCriteriaGroupArgs
  ): Promise<CriteriaGroup | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MarksBand])
  @nestAccessControl.UseRoles({
    resource: "MarksBand",
    action: "read",
    possession: "any",
  })
  async marksBands(
    @graphql.Parent() parent: CriteriaGroup,
    @graphql.Args() args: MarksBandFindManyArgs
  ): Promise<MarksBand[]> {
    const results = await this.service.findMarksBands(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Rubric, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Rubric",
    action: "read",
    possession: "any",
  })
  async rubric(
    @graphql.Parent() parent: CriteriaGroup
  ): Promise<Rubric | null> {
    const result = await this.service.getRubric(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
