/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateRubricArgs } from "./CreateRubricArgs";
import { UpdateRubricArgs } from "./UpdateRubricArgs";
import { DeleteRubricArgs } from "./DeleteRubricArgs";
import { RubricFindManyArgs } from "./RubricFindManyArgs";
import { RubricFindUniqueArgs } from "./RubricFindUniqueArgs";
import { Rubric } from "./Rubric";
import { CriteriaGroupFindManyArgs } from "../../criteriaGroup/base/CriteriaGroupFindManyArgs";
import { CriteriaGroup } from "../../criteriaGroup/base/CriteriaGroup";
import { MarksBandFindManyArgs } from "../../marksBand/base/MarksBandFindManyArgs";
import { MarksBand } from "../../marksBand/base/MarksBand";
import { SectionFindManyArgs } from "../../section/base/SectionFindManyArgs";
import { Section } from "../../section/base/Section";
import { User } from "../../user/base/User";
import { RubricService } from "../rubric.service";

@graphql.Resolver(() => Rubric)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class RubricResolverBase {
  constructor(
    protected readonly service: RubricService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Rubric",
    action: "read",
    possession: "any",
  })
  async _rubricsMeta(
    @graphql.Args() args: RubricFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Rubric])
  @nestAccessControl.UseRoles({
    resource: "Rubric",
    action: "read",
    possession: "any",
  })
  async rubrics(@graphql.Args() args: RubricFindManyArgs): Promise<Rubric[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Rubric, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Rubric",
    action: "read",
    possession: "own",
  })
  async rubric(
    @graphql.Args() args: RubricFindUniqueArgs
  ): Promise<Rubric | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Rubric)
  @nestAccessControl.UseRoles({
    resource: "Rubric",
    action: "create",
    possession: "any",
  })
  async createRubric(@graphql.Args() args: CreateRubricArgs): Promise<Rubric> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        owner: {
          connect: args.data.owner,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Rubric)
  @nestAccessControl.UseRoles({
    resource: "Rubric",
    action: "update",
    possession: "any",
  })
  async updateRubric(
    @graphql.Args() args: UpdateRubricArgs
  ): Promise<Rubric | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          owner: {
            connect: args.data.owner,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Rubric)
  @nestAccessControl.UseRoles({
    resource: "Rubric",
    action: "delete",
    possession: "any",
  })
  async deleteRubric(
    @graphql.Args() args: DeleteRubricArgs
  ): Promise<Rubric | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CriteriaGroup])
  @nestAccessControl.UseRoles({
    resource: "CriteriaGroup",
    action: "read",
    possession: "any",
  })
  async criteriaGroups(
    @graphql.Parent() parent: Rubric,
    @graphql.Args() args: CriteriaGroupFindManyArgs
  ): Promise<CriteriaGroup[]> {
    const results = await this.service.findCriteriaGroups(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MarksBand])
  @nestAccessControl.UseRoles({
    resource: "MarksBand",
    action: "read",
    possession: "any",
  })
  async marksBands(
    @graphql.Parent() parent: Rubric,
    @graphql.Args() args: MarksBandFindManyArgs
  ): Promise<MarksBand[]> {
    const results = await this.service.findMarksBands(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Section])
  @nestAccessControl.UseRoles({
    resource: "Section",
    action: "read",
    possession: "any",
  })
  async sections(
    @graphql.Parent() parent: Rubric,
    @graphql.Args() args: SectionFindManyArgs
  ): Promise<Section[]> {
    const results = await this.service.findSections(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async owner(@graphql.Parent() parent: Rubric): Promise<User | null> {
    const result = await this.service.getOwner(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
